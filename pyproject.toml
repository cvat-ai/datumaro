[tool.poetry]
name = "datumaro"
version = "0.3.0"
description = "Dataset Management Framework (Datumaro)"
authors = ["Maxim Zhiltsov <maxim@cvat.ai>"]
maintainers = ["Maxim Zhiltsov <maxim@cvat.ai>"]
readme = "README.md"
license = "MIT"
homepage = "https://cvat.ai"
repository = "https://github.com/cvat-ai/datumaro"
documentation = "https://cvat-ai.github.io/datumaro/docs/getting_started/"
keywords = [
    "dataset management framework", "computer vision", "COCO", "PASCAL VOC",
    "classification", "detection", "segmentation", "format conversion", "import", "export",
    "statistics"
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
packages = [
    { include = "datumaro" }
]
include = [
    "README.md",
    "LICENSE",
    "3rd-party.txt",
]

[tool.poetry.scripts]
datum = "datumaro.cli.__main__:main"

[tool.poetry.extras]
default = ["dvc", "GitPython"]
tf = ["tensorflow"]
tf-gpu = ["tensorflow-gpu"]
tfds = ["tensorflow-datasets"]


[tool.poetry.dependencies]
python = "^3.7, ^3.8, ^3.9"

attrs = ">= 21.3.0"
defusedxml = ">=0.7.0"
h5py = ">=2.10.0"
importlib_metadata = { version = "!=1.0", python = "<3.8" }
lxml = ">=4.4.1"
matplotlib = ">=3.3.1"
networkx = ">=2.5"
nibabel = ">=3.2.1"
numpy = ">=1.17.3"
orjson = ">=3.6.6"
Pillow = ">=6.1.0"
"ruamel.yaml" = ">=0.17.0"
typing_extensions = ">=3.7.4.3"

pycocotools = { version = ">=2.0.4", markers = "platform_system != 'Windows' or python_version >= '3.9'" }
pycocotools-windows = { version = "*", markers = "platform_system == 'Windows' and python_version < '3.9'" }

PyYAML = ">=5.3.1"

# 2.3 has an unlisted dependency on PyTorch, which we don't need
tensorboardX = ">=1.8,!=2.3"

# Builtin plugin dependencies
# NDR
scipy = "*"

# Image generator
requests = "*"

# Sampler
pandas = ">=1.1.5"

# Extras dependencies
tensorflow = { version = "*", optional = true }

# 4.5.0 fails on Windows, https://github.com/tensorflow/datasets/issues/3709
tensorflow-datasets = { version = "!=4.5.0,!=4.5.1", optional = true }

tensorflow-gpu = { version = "*", optional = true }

# A library to send the telemetry data from the OpenVINO toolkit components.
openvino-telemetry = { version = ">=2022.1.0", optional = true }

dvc = { version = ">=2.7.0", optional = true }

# https://github.com/openvinotoolkit/datumaro/issues/612
GitPython = { version = ">=3.1.18,!=3.1.25", optional = true }


[tool.poetry.group.docs.dependencies]
# click>=8.1.0 fails https://github.com/streamlit/streamlit/issues/4555
click = "< 8.1"
gitpython = "*"
openvino-dev = "*"
packaging = "*"
sphinx-copybutton = "~0.4.0"
sphinx-rtd-theme = "~1.0.0"
Sphinx = "~4.2.0"
sphinxcontrib-mermaid = "*"
sphinxcontrib-versioning = { git = "https://github.com/pytorch-ignite/sphinxcontrib-versioning.git", rev = "a1a1a94ca80a0233f0df3eaf9876812484901e76" }
toml = "*"


[tool.poetry.group.test.dependencies]
pytest = ">=5.3.5"


[tool.poetry.group.dev.dependencies]
# linters
bandit = ">=1.7.0"
isort = "~=5.9"
pylint = ">=2.7.0"
coverage = "*"
black = ">=22.1.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
forced_separate = ["tests"]
line_length = 100
skip_gitignore = true # align tool behavior with Black

[tool.coverage.run]
branch = true
# relative_files = true # does not work?

source = [
    "datumaro/",
]

omit = [
    "datumaro/__main__.py",
    "datumaro/version.py",
    "tests/*",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',

    # Don't complain about missing debug-only code:
    'def __repr__',
    'if\s+[\w\.()]+\.isEnabledFor\(log\.DEBUG\):',

    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',

    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',
]

# don't fail on the code that can be found
ignore_errors = true

skip_empty = true

[tool.black]
line-length = 100
target-version = ['py38']
